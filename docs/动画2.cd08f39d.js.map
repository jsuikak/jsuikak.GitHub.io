{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-804da661ccdd1875.js","src/ani2.js","node_modules/@parcel/runtime-js/lib/runtime-15f02c0f04f00e8c.js","node_modules/@parcel/runtime-js/lib/runtime-be93c89218e16cf3.js"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"iISan\\\":\\\"动画2.cd08f39d.js\\\",\\\"avzUn\\\":\\\"心脏支架动画.e817b45a.glb\\\",\\\"5vMVR\\\":\\\"3.671e9293.png\\\",\\\"aiB2C\\\":\\\"index.27addb73.js\\\"}\"));","import * as THREE from 'three';\r\n\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport { GUI } from \"lil-gui\";\r\nimport model_path from 'url:./models/gltf/心脏支架动画.glb';\r\nimport env_texture from \"url:./textures/3.png\";\r\n\r\nlet camera, scene, renderer, controls;\r\nlet model, mixer, action, clock;\r\nlet gui;\r\nlet gui_controller_progress,\r\n    gui_controller_auto_play;\r\nlet animation_info = {\r\n    maxTime: 7, //动画最长时间\r\n    progress: 0, //设置动画进度的时间\r\n    auto_play: true\r\n};\r\nlet raycaster;\r\nlet mouseVector;\r\nlet selectObject;\r\n\r\ninit();\r\n\r\nfunction init() {\r\n    window.addEventListener('resize', onWindowResize);\r\n    window.addEventListener(\"click\", onDocumentMouseMove)\r\n\r\n    document.onkeydown = function (e) {\r\n        if (e.keyCode == 32) {\r\n            animation_info.auto_play = !animation_info.auto_play;\r\n        }\r\n    }\r\n\r\n    scene =\r\n        new THREE.Scene();\r\n\r\n    renderer =\r\n        new THREE.WebGLRenderer({ antialias: true });\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n    renderer.toneMappingExposure = 1;\r\n    renderer.outputEncoding = THREE.sRGBEncoding;\r\n    document.body.appendChild(renderer.domElement);\r\n\r\n    camera =\r\n        new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    scene.add(camera)\r\n    //*************************************//\r\n\r\n    controls =\r\n        new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.minDistance = 1;\r\n    controls.maxDistance = 1000;\r\n    controls.target.set(0, 5.5, 0);\r\n\r\n    // scene.add(new THREE.AxesHelper(50)); //坐标轴\r\n    clock = new THREE.Clock();//辅助更新动画\r\n    gui = new GUI();\r\n\r\n    raycaster = new THREE.Raycaster();\r\n    mouseVector = new THREE.Vector2();\r\n    selectObject = null\r\n    //=====灯光=====\r\n    const spotLight = new THREE.SpotLight(0xffffff);\r\n    spotLight.position.set(0, 50, 300);\r\n    spotLight.castShadow = true;\r\n    spotLight.shadow.mapSize.width = 1024;\r\n    spotLight.shadow.mapSize.height = 1024;\r\n    spotLight.shadow.camera.near = 500;\r\n    spotLight.shadow.camera.far = 4000;\r\n    spotLight.shadow.camera.fov = 30;\r\n    scene.add(spotLight);\r\n\r\n    const spotLight2 = new THREE.SpotLight(0xffffff);\r\n    spotLight2.position.set(0, 50, -300);\r\n    spotLight2.castShadow = true;\r\n    spotLight2.shadow.mapSize.width = 1024;\r\n    spotLight2.shadow.mapSize.height = 1024;\r\n    spotLight2.shadow.camera.near = 500;\r\n    spotLight2.shadow.camera.far = 4000;\r\n    spotLight2.shadow.camera.fov = 30;\r\n    scene.add(spotLight2);\r\n    //=====end灯光=====\r\n\r\n    //环境纹理\r\n    const geometry = new THREE.SphereGeometry(500, 60, 40);\r\n    geometry.scale(-1, 1, 1);\r\n    const texture = new THREE.TextureLoader().load(env_texture);\r\n    const material = new THREE.MeshBasicMaterial({ map: texture });\r\n    const mesh = new THREE.Mesh(geometry, material);\r\n    scene.add(mesh);\r\n    //end环境纹理\r\n\r\n    new GLTFLoader()\r\n        .load(model_path, function (gltf) {\r\n            model = gltf.scene;\r\n            scene.add(model)//加载的模型添入场景\r\n\r\n            //controls.update() must be called after any manual changes to the camera's transform\r\n            camera.position.set(0, 20, 100);\r\n            controls.update();\r\n\r\n            controls.target.set(0, 4.5, 0);\r\n\r\n            let clip = gltf.animations[0];\r\n            animation_info.maxTime = clip.duration;\r\n\r\n            mixer = new THREE.AnimationMixer(gltf.scene);\r\n            mixer.clipAction(clip).play();//播放动画\r\n\r\n            //删掉显示进度的节点\r\n            let body = document.querySelector(\"body\");\r\n            body.removeChild(body.querySelector(\".loading\"));\r\n            //加载完成时进入run\r\n            run();\r\n        }, function (xhr) {\r\n            //加载时调用\r\n            let progress = document.querySelector(\".loading .progress\");\r\n            progress.innerText = (xhr.loaded / xhr.total * 100).toFixed(2) + '%';\r\n            // console.log(\"模型加载中: \" + (xhr.loaded / xhr.total * 100).toFixed(2) + '%');\r\n        }, function (error) {\r\n            //出错时调用\r\n            if (progress)\r\n                progress.innerText = \"加载失败！\";\r\n            console.log('An error happened');\r\n        });\r\n\r\n    gui_controller_progress = gui.add(animation_info, \"progress\", 0, animation_info.maxTime)//自动变为条形控件，设置最小和最大值\r\n        .onChange(function () {\r\n            //手动拉进度条时，停止自动播放\r\n            if (animation_info.auto_play)\r\n                animation_info.auto_play = false;\r\n        })\r\n        .name(\"进度\");\r\n    gui_controller_auto_play = gui.add(animation_info, \"auto_play\")//bool值，自动变为勾选控件\r\n        .name(\"自动播放\");\r\n\r\n}\r\n\r\n//end init()\r\n\r\nfunction run() {\r\n    requestAnimationFrame(run);//请求动画帧, 每一帧运行run\r\n\r\n    if (!animation_info.auto_play)//不是自动播放时，通过进度条改变进度\r\n    {\r\n        mixer.setTime(animation_info.progress);\r\n    } else {\r\n        animation_info.progress = mixer.time;\r\n        gui_controller_progress.updateDisplay();/*进度面板数据更新*/\r\n    }\r\n\r\n    const dt = clock.getDelta();\r\n    if (mixer) {\r\n        mixer.update(dt);//推动动画进度\r\n    }\r\n    if (animation_info.progress >= animation_info.maxTime) {\r\n        animation_info.progress = 0;\r\n        mixer.setTime(0);\r\n    }\r\n    //更新gui面板数据\r\n    //\r\n    gui_controller_auto_play.updateDisplay();/*自动播放面板数据更新*/\r\n\r\n    controls.update(); // required if damping enabled\r\n    render();//渲染一次场景\r\n}\r\n\r\nfunction render() {\r\n    renderer.render(scene, camera);\r\n}\r\n\r\nfunction onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction getIntersects(x, y) {\r\n    x = (x / window.innerWidth) * 2 - 1;\r\n    y = -(y / window.innerHeight) * 2 + 1;\r\n    mouseVector.set(x, y);\r\n\r\n    //通过摄像机和鼠标位置更新射线\r\n    raycaster.setFromCamera(mouseVector, camera);\r\n\r\n    // 返回物体和射线的焦点\r\n    return raycaster.intersectObject(model, true);\r\n}\r\n\r\nfunction onDocumentMouseMove(event) {\r\n    var intersects = getIntersects(event.layerX, event.layerY);\r\n    if (intersects.length > 0) {\r\n        var res = intersects.filter(function (res) {\r\n            return res && res.object\r\n        })[0];\r\n        if (res && res.object) {\r\n            selectObject = res.object;\r\n\r\n            alert(selectObject.name)\r\n\r\n            var title = document.getElementById(\"title\");\r\n            title.style.display = \"block\";\r\n        }\r\n    }\r\n}\r\n\r\n","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"avzUn\")).toString();","module.exports = new __parcel__URL__(require('./helpers/bundle-manifest').resolve(\"5vMVR\")).toString();"],"names":["$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","parcelRequire","register","JSON","parse","$ilwiq","$9f900328e821798d$exports","URL","resolve","import","meta","url","toString","$f3388d01b4ea233c$var$camera","$f3388d01b4ea233c$var$scene","$f3388d01b4ea233c$var$renderer","$f3388d01b4ea233c$var$controls","$f3388d01b4ea233c$var$model","$f3388d01b4ea233c$var$mixer","$f3388d01b4ea233c$var$clock","$f3388d01b4ea233c$var$gui","$f3388d01b4ea233c$var$gui_controller_progress","$f3388d01b4ea233c$var$gui_controller_auto_play","$da73aedf0eaf05ca$exports","$f3388d01b4ea233c$var$raycaster","$f3388d01b4ea233c$var$mouseVector","$f3388d01b4ea233c$var$selectObject","$f3388d01b4ea233c$var$animation_info","maxTime","progress","auto_play","$f3388d01b4ea233c$var$run","requestAnimationFrame","time","updateDisplay","setTime","dt","getDelta","update","render","$f3388d01b4ea233c$var$onWindowResize","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","setSize","$f3388d01b4ea233c$var$onDocumentMouseMove","event","x","y","intersects","layerX","layerY","set","setFromCamera","intersectObject","res","filter","object","alert","name","document","getElementById","style","display","addEventListener","onkeydown","e","keyCode","Scene","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","body","appendChild","domElement","PerspectiveCamera","add","$5Rd1x","OrbitControls","enableDamping","minDistance","maxDistance","target","Clock","$9sWXr","GUI","Raycaster","Vector2","spotLight","SpotLight","position","castShadow","shadow","mapSize","width","height","camera","near","far","fov","spotLight2","geometry","SphereGeometry","scale","texture","TextureLoader","load","$parcel$interopDefault","material","MeshBasicMaterial","map","mesh","Mesh","$7lx9d","GLTFLoader","gltf","scene","clip","animations","duration","AnimationMixer","clipAction","play","querySelector","removeChild","xhr","innerText","loaded","total","toFixed","error","console","log","onChange","$f3388d01b4ea233c$var$init"],"version":3,"file":"动画2.cd08f39d.js.map"}